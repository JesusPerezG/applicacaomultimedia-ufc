h3. Documentação

h4. Como o servidor identifica a lista de usuários conectados?

p. Com uma variavel "clientList"

@public static List<Listener> clientList=new ArrayList<Listener>();@
    
p. Variável clientList contém todos os clientes que estão conectados e ter clicado no "Setup"
    

h4. Como é realizado o controle de entrada e saída de novos usuários?

p. Entrada:
* O cliente clica no "setup"
* O cliente é adicionado à lista.

bc. //*Add client into the list
                synchronized (clientList) {
                    System.out.println("add Client on port: "+RTPClientPort);
                    clientList.add(newClient);
}

p. Saida:
* O cliente clica no "teardown"
* O cliente é removido da lista

bc. //*When the user click on TEARDOWN, we remove the client from the list
                synchronized (clientList) {
                    clientList.remove(newClient);
}

h4. Como o servidor identifica o primeiro usuário, para iniciar uma sessão de difusão, e o último usuário, para encerrá-la?

p. O servidor olha o tamanho da lista:

bc. if(Server.clientList.size()==0) {
            System.out.println("Starting timer");
            Server.timer.start();
        }
        
bc. //*if still have client connected
     if(Server.clientList.size() > 0) {
         ...
         else {
                     System.out.println("There is no more clients connected, stopping timer");
                     //*there is no more client connected
                     //*reinit framenb
                     currentImageNb=0;
                     videoStream.reset();
                     //*stop timer
                     Server.timer.stop();
        }

h4. Como são controlados os endereços/portas para emissão dos pacotes RTP?

p. Eles são armazenados na lista "clientList" para cada cliente.

* A porta para os dados RTP é fornecido pelo cliente durante o "Setup".
* O endereço é obtido utilizando o método "getInetAddress"

h4. Como o servidor faz para enviar os quadros “simultaneamente” para todos os clientes conectados?

p. A cada "tick do relógio", ele passa a lista de clientes e envia os dados.

bc. //* For each client connected, send the packets
            for (Iterator<Listener> iterator = Server.clientList.iterator(); iterator.hasNext();) {
                Listener aClient = (Listener) iterator.next();
                System.out.println("Sending datagramPacket");
                aClient.getDatagramSocket().send(new DatagramPacket(packet_bits, packet_length,aClient.getClientAddress(),aClient.getRTPClientPort()));
}